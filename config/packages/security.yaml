# _security_logout:
#     resource: security.route_loader.logout
#     type: service

security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

    providers:
        users_in_memory: { memory: null }

        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        login:
            pattern: ^/login
            stateless: true
            json_login:
                check_path: /login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            provider: app_user_provider
        api:
            pattern: ^/
            stateless: true
            jwt: ~
            provider: app_user_provider

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: users_in_memory
            custom_authenticator: App\Security\TokenAuthenticator
            entry_point: App\Security\TokenAuthenticator
            stateless: true
            logout: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

            # ALGUN DIA PROBAREMOS ESA SHIT...
            # role_hierarchy:
            #     ROLE_ADMIN:       ROLE_USER
            #     ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
            
            json_login:
                check_path: login
                username_path: security.credentials.email
                password_path: security.credentials.password


    # Con esto podemos denegar acceso a ciertas rutas
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: ROLE_USER }
        # - { path: ^/, roles: PUBLIC_ACCESS }
    #     # require ROLE_ADMIN for /admin*
    #     - { path: '^/admin', roles: ROLE_ADMIN }

    #     # or require ROLE_ADMIN or IS_AUTHENTICATED_FULLY for /admin*
    #     - { path: '^/admin', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

    #     # the 'path' value can be any valid regular expression
    #     # (this one will match URLs like /api/post/7298 and /api/comment/528491)
    #     - { path: ^/api/(post|comment)/\d+$, roles: ROLE_USER }
